;;;
;;; gauche_sdl
;;;

;;;;;
;;@type cmd
;;@@parse-relative #f

(define-module sdl
  (use gauche.sequence)
  (use util.queue)
  (export-all)
  )
(select-module sdl)

;; Loads extension
(dynamic-load "gauche-sdl")

(define-method call-with-iterator ((v <nnvector>) proc . opts)
  (let-keywords opts ([start #f])
    (let* ([len (slot-ref v 'length)]
           [i (or start 0)]
           [ref (let ([type (slot-ref v 'type)])
                  (cond
                    [(eq? type nn-u8) nnu8vector-ref]
                    [(eq? type nn-u16) nnu16vector-ref]
                    [(eq? type nn-u32) nnu32vector-ref]
                    [(eq? type nn-s8) nns8vector-ref]
                    [(eq? type nn-s16) nns16vector-ref]
                    [(eq? type nn-s32) nns32vector-ref]
                    [(eq? type nn-boolean) nnbvector-ref]
                    [else (raise (condition
                                   (<error> (message "illegal type."))))]))])
      (proc (lambda () (>= i len))
            (lambda () (let ([r (ref v i)])
                         (inc! i)
                         r))))))

;;not support call-with-builder

(define-method referencer ((v <nnvector>)) nnvector-ref)
(define-method modifier ((v <nnvector>)) nnvector-set!)
(define-method size-of ((v <nnvector>)) (slot-ref v 'length))

;;for <sdl-palette>

(define-method call-with-iterator ((v <sdl-palette>) proc . opts)
  (let-keywords opts ([start #f])
    (let ([len (slot-ref v 'ncolors)]
          [i (or start 0)])
      (proc (lambda () (>= i len))
            (lambda () (begin0 (palette-ref v i)
                         (inc! i)))))))

(define-method call-with-builder ((v <sdl-palette-meta>) proc . opts)
  (let-keywords opts ((size #f))
    (if size
      (let ([v (make-palette size)]
            [i 0])
        (proc (lambda (item) (palette-set! v i item) (inc! i))
              (lambda () v)))
      (let ([q (make-queue)])
        (proc (lambda (item) (enqueue! q item))
              (lambda () (list->palette (dequeue-all! q))))))))

(define-method referencer ((v <sdl-palette>)) palette-ref)
(define-method modifier ((v <sdl-palette>)) palette-set!)
(define-method size-of ((v <sdl-palette>)) (slot-ref v 'ncolors))

