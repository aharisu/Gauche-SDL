;;;
;;; nnvector.scm
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

;;;;;
;;@type cmd
;;@@parse-relative #f

(define-module nnvector
  (use gauche.sequence)
  (export-all)
  )
(select-module nnvector)

;; Loads extension
(dynamic-load "nnvector")

(define-method call-with-iterator ((v <nnvector>) proc . opts)
  (let-keywords opts ([start #f])
    (let* ([len (slot-ref v 'length)]
           [i (or start 0)]
           [ref (let ([type (slot-ref v 'type)])
                  (cond
                    [(eq? type nn-u8) nnu8vector-ref]
                    [(eq? type nn-u16) nnu16vector-ref]
                    [(eq? type nn-u32) nnu32vector-ref]
                    [(eq? type nn-s8) nns8vector-ref]
                    [(eq? type nn-s16) nns16vector-ref]
                    [(eq? type nn-s32) nns32vector-ref]
                    [(eq? type nn-boolean) nnbvector-ref]
                    [else (raise (condition
                                   (<error> (message "illegal type."))))]))])
      (proc (lambda () (>= i len))
            (lambda () (let ([r (ref v i)])
                         (inc! i)
                         r))))))

;;not support call-with-builder

(define-method referencer ((v <nnvector>)) nnvector-ref)
(define-method modifier ((v <nnvector>)) nnvector-set!)
(define-method size-of ((v <nnvector>)) (slot-ref v 'length))


