;;;
;;; sdl-ttflib.stub
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;


"
#include \"gauche-sdl-ttf.h\"
#include \"../sdl_type.gen.h\"
#include \"ttf_type.gen.h\"
"

(include "ttf_type.gen.stub.header")
(include "../sdl_type.gen.stub.header")
(include "../macro.stub.header")


(define-cise-stmt (set-ctx-data var obj)
  `(cond
     [(is-type? ,obj <sdl-rw-ops>)
      (set! ,var (unboxing ,obj <sdl-rw-ops>))]
     [(is-type? ,obj <sdl-rw-ops-user>)
      (set! ,var (cast SDL_RWops* (unboxing ,obj <sdl-rw-ops-user>)))]
     [else (Scm_Error "<sdl-rw-ops> required, but got %S." ,obj)]))

(define-cfn scm-finalize-sdl-surface (obj::ScmObj data::void*) :: void
  (let* ([o :: ScmSDL_Surface* (SCM_SDL_SURFACE obj)])
    (when (@ o->data)
      (SDL_FreeSurface (@ o->data))
      (set! (@ o->data) 0))))

(define-cise-stmt raise-ttf-error 
  [(_ func-name)
    `(Scm_RaiseCondition
      (SCM_OBJ SCM_CLASS_SDL_ERROR)
       SCM_RAISE_CONDITION_MESSAGE
        "%s: %s"
         ,(symbol->string func-name) (TTF_GetError))])

;;;;;
;; Initialize the TTF engine.
;; Raise <ttf-error> on error
(define-cproc ttf-init () :: <void>
  (unless (zero? (TTF_Init))
    (raise-ttf-error ttf-init)))

;;;;;
;; Open a font file and create a font of the specified point size.
;; Some .fon fonts will have several sizes embedded in the file, so the
;; point size becomes the index of choosing which size.  If the value
;; is too high, the last indexed size will be the default.
(define-cproc ttf-open-font (file::<const-cstring> ptsize::<int>) :: <ttf-font>
  (let* ([f :: TTF_Font* (TTF_OpenFont file ptsize)])
    (if (zero? f)
      (raise-ttf-error ttf-open-font)
      (result f))))

(define-cproc ttf-open-font-index (file::<const-cstring> ptsize::<int> index::<int>) :: <ttf-font>
  (let* ([f :: TTF_Font* (TTF_OpenFontIndex file ptsize index)])
    (if (zero? f)
      (raise-ttf-error ttf-open-font-index)
      (result f))))

(define-cproc ttf-open-font-rw (src::<top> ptsize::<int>) :: <ttf-font>
  (let* ([src-data :: SDL_RWops*])
    (set-ctx-data src-data src)
    (ENSURE_NOT_NULL src-data)
    (let* ([f :: TTF_Font* (TTF_OpenFontRW src-data 0 ptsize)])
      (if (zero? f)
        (raise-ttf-error ttf-open-font-rw)
        (result f)))))

(define-cproc ttf-open-font-index-rw (src::<top> ptsize::<int> index::<int>) :: <ttf-font>
  (let* ([src-data :: SDL_RWops*])
    (set-ctx-data src-data src)
    (ENSURE_NOT_NULL src-data)
    (let* ([f :: TTF_Font* (TTF_OpenFontIndexRW src-data 0 ptsize index)])
      (if (zero? f)
        (raise-ttf-error ttf-open-font-index-rw)
        (result f)))))

(define-enum TTF_STYLE_NORMAL)
(define-enum TTF_STYLE_BOLD)
(define-enum TTF_STYLE_ITALIC)
(define-enum TTF_STYLE_UNDERLINE)

;;;;;
;; Retrieve the font style
;; This font style is implemented by modifying the font glyphs, and
;; doesn't reflect any inherent properties of the truetype font file.
(define-cproc ttf-get-font-style (font::<ttf-font>) :: <fixnum>
  (ENSURE_NOT_NULL font)
  (result (TTF_GetFontStyle font)))

;;;;;
;; Set the font style
;; This font style is implemented by modifying the font glyphs, and
;; doesn't reflect any inherent properties of the truetype font file.
(define-cproc ttf-set-font-style (font::<ttf-font> style::<fixnum>) :: <void>
  (ENSURE_NOT_NULL font)
  (TTF_SetFontStyle font style))

;;;;;
;; Get the total height of the font - usually equal to point size
(define-cproc ttf-font-height (font::<ttf-font>) :: <int>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontHeight font)))

;;;;;
;; Get the offset from the baseline to the top of the font
;; This is a positive value, relative to the baseline.
(define-cproc ttf-font-ascent (font::<ttf-font>) :: <int>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontAscent font)))

;;;;;
;; Get the offset from the baseline to the bottom of the font
;; This is a negative value, relative to the baseline.
(define-cproc ttf-font-descent (font::<ttf-font>) :: <int>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontDescent font)))

;;;;;
;; Get the recommended spacing between lines of text for this font
(define-cproc ttf-font-line-skip (font::<ttf-font>) :: <int>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontLineSkip font)))

;;;;;
;; Get the number of faces of the font
(define-cproc ttf-font-faces (font::<ttf-font>) :: <int>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontFaces font)))

;;;;;
;; Get the font face attributes, if any
(define-cproc ttf-font-face-fixed-width? (font::<ttf-font>) :: <boolean>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontFaceIsFixedWidth font)))

(define-cproc ttf-font-face-family-name (font::<ttf-font>) :: <const-cstring>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontFaceFamilyName font)))

(define-cproc ttf-font-face-style-name (font::<ttf-font>) :: <const-cstring>
  (ENSURE_NOT_NULL font)
  (result (TTF_FontFaceStyleName font)))

;;;;;
;; Get the metrics (dimensions) of a glyph
;; To understand what these metrics mean, here is a useful link:
(define-cproc ttf-glyph-metrics (font::<ttf-font> ch::<uint16>) :: (<int> <int> <int> <int> <int>)
  (ENSURE_NOT_NULL font)
  (let* ([minx :: int]
         [miny :: int] 
         [maxx :: int]
         [maxy :: int]
         [advance :: int])
    (unless (zero? (TTF_GlyphMetrics font ch (& minx) (& maxx)
                                     (& miny) (& maxy) (& advance)))
      (raise-ttf-error ttf-glyph-metrics))
    (result minx maxx miny maxy advance)))

;;;;;
;; Get the dimensions of a rendered string of text
(define-cproc ttf-size-text (font::<ttf-font> text::<const-cstring>) :: (<int> <int>)
  (ENSURE_NOT_NULL font)
  (let* ([w :: int]
         [h :: int])
    (unless (zero? (TTF_SizeUTF8 font text (& w) (& h)))
      (raise-ttf-error ttf-size-text))
    (result w h)))

;;;;;
;; Create an 8-bit palettized surface and render the given text at
;; fast quality with the given font and color.  The 0 pixel is the
;; colorkey, giving a transparent background, and the 1 pixel is set
;; to the text color.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-text-solid (font::<ttf-font> text::<const-cstring> fg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderUTF8_Solid font text fg)])
    (if (not obj)
      (raise-ttf-error ttf-render-text-solid))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Create an 8-bit palettized surface and render the given glyph at
;; fast quality with the given font and color.  The 0 pixel is the
;; colorkey, giving a transparent background, and the 1 pixel is set
;; to the text color.  The glyph is rendered without any padding or
;; centering in the X direction, and aligned normally in the Y direction.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-glyph-solid (font::<ttf-font> ch::<char> fg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderGlyph_Solid font ch fg)])
    (if (not obj)
      (raise-ttf-error ttf-render-glyph-solid))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Create an 8-bit palettized surface and render the given text at
;; high quality with the given font and colors.  The 0 pixel is background,
;; while other pixels have varying degrees of the foreground color.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-text-shaded (font::<ttf-font> text::<const-cstring> 
                                                      fg::<sdl-color> bg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderUTF8_Shaded font text fg bg)])
    (if (not obj)
      (raise-ttf-error ttf-render-text-shaded))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Create an 8-bit palettized surface and render the given glyph at
;; high quality with the given font and colors.  The 0 pixel is background,
;; while other pixels have varying degrees of the foreground color.
;; The glyph is rendered without any padding or centering in the X
;; direction, and aligned normally in the Y direction.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-glyph-shaded (font::<ttf-font> ch::<char> 
                                                        fg::<sdl-color> bg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderGlyph_Shaded font ch fg bg)])
    (if (not obj)
      (raise-ttf-error ttf-render-glyph-shaded))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Create a 32-bit ARGB surface and render the given text at high quality,
;; using alpha blending to dither the font with the given color.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-text-blended (font::<ttf-font> text::<const-cstring> fg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderUTF8_Blended font text fg)])
    (if (not obj)
      (raise-ttf-error ttf-render-text-blended))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Create a 32-bit ARGB surface and render the given glyph at high quality,
;; using alpha blending to dither the font with the given color.
;; The glyph is rendered without any padding or centering in the X
;; direction, and aligned normally in the Y direction.
;; This function returns the new surface, or raise <sdl-error> if there was an error.
(define-cproc ttf-render-glyph-blended (font::<ttf-font> ch::<char> fg::<sdl-color>) :: <top>
  (ENSURE_NOT_NULL font)
  (let* ([obj :: SDL_Surface* (TTF_RenderGlyph_Blended font ch fg)])
    (if (not obj)
      (raise-ttf-error ttf-render-glyph-blended))
    (let* ([ret :: ScmObj (boxing obj <sdl-surface>)])
      (Scm_RegisterFinalizer ret scm-finalize-sdl-surface 0)
      (result ret))))

;;;;;
;; Close an opened font file
(define-cproc ttf-close-font (font::<ttf-font>) :: <void>
  (when font
    (TTF_CloseFont font)
    (set! (-> (SCM_FOREIGN_POINTER font_scm) ptr) 0)))

;;;;;
;; De-initialize the TTF engine
(define-cproc ttf-quit () :: <void>
  (TTF_Quit))

;;;;;
;; Check if the TTF engine is initialized
(define-cproc ttf-was-init () :: <boolean>
  (result (TTF_WasInit)))

