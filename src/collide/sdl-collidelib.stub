;;;
;;; sdl-collidelib.stub
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

"
#include \"gauche-sdl-collide.h\"
#include \"../sdl_type.gen.h\"
#include \"collide_type.gen.h\"
"

(include "../sdl_type.gen.stub.header")
(include "../macro.stub.header")
(include "collide_type.gen.stub.header")

;;;;;
;; SDL surface test if offset (u,v) is a transparent pixel
(define-cproc cld-transparent-pixel (surface::<sdl-surface> u::<fixnum> v::<fixnum>) :: <boolean>
  (result (SDL_CollideTransparentPixel surface u v)))

;;;;;
;; Pixel-perfect collision between two surfaces.
;;
;; @param as the first surface to check
;; @param ax the top-left X-coordinate of surface @a SA
;; @param ay the top-left Y-coordinate of surface @a SA
;; @param bs the second surface to check
;; @param bx the top-left X-coordinate of surface @a SB
;; @param by the top-left Y-coordinate of surface @a SB
;; @param skip how many pixels the looping test should skip.
;;             1 is a truly perfect pixel test, but a value
;;             of 4 should be fine.
;;             this parameter is here to speed up the test at
;;             the expense of accuracy.
;;
;; @return #t on collision, #f otherwise
(define-cproc cld-pixel-surface (as::<sdl-surface> ax::<fixnum> ay::<fixnum>
                                 bs::<sdl-surface> bx::<fixnum> by::<fixnum>
                                 :optional (skip::<fixnum> 4)) :: <boolean>
  (ENSURE_NOT_NULL as)
  (ENSURE_NOT_NULL bs)
  (result (SDL_CollidePixel as ax ay bs bx by skip)))

;;;;;
;; Bounding-box collision between two surfaces.
;;
;; @param as the first surface to check
;; @param ax the top-left X-coordinate of surface @a SA
;; @param ay the top-left Y-coordinate of surface @a SA
;; @param bs the second surface to check
;; @param bx the top-left X-coordinate of surface @a SB
;; @param by the top-left Y-coordinate of surface @a SB
;;
;; @return #t on collision, #f otherwise
(define-cproc cld-bounding-box-surface (as::<sdl-surface> ax::<fixnum> ay::<fixnum>
                                        bs::<sdl-surface> bx::<fixnum> by::<fixnum>) :: <boolean>
  (ENSURE_NOT_NULL as)
  (ENSURE_NOT_NULL bs)
  (result (SDL_CollideBoundingBoxSurface as ax ay bs bx by)))

;;;;;
;; Bounding-box collision between two rectangles.
;;
;; @param a the first rectangle to check
;; @param b the second rectangle to check
;;
;; @return #t on collision, #f otherwise
(define-cproc cld-bounding-box-rect (a::<sdl-rect> b::<sdl-rect>) :: <boolean>
  (result (SDL_CollideBoundingBoxRect a b)))

;;;;;
;; tests whether 2 circles intersect
;;
;; circle1 : centre (x1,y1) with radius r1
;; circle2 : centre (x2,y2) with radius r2
(define-cproc cld-bounding-circle (cx1::<fixnum> cy1::<fixnum> r1::<fixnum>
                                   cx2::<fixnum> cy2::<fixnum> r2::<fixnum>
                                   offset::<fixnum>) :: <boolean>
  (result (SDL_CollideBoundingCircle  cx1 cy1 r1 cx2 cy2 r2 offset)))

;;;;;
;; a circle intersection detection algorithm that will use
;; the position of the centre of the surface as the centre of
;; the circle and approximate the radius using the width and height
;; of the surface (for example a rect of 4x6 would have r = 2.5).
(define-cproc cld-bounding-circle-surface (a::<sdl-surface> x1::<fixnum> y1::<fixnum>
                                           b::<sdl-surface> x2::<fixnum> y2::<fixnum>
                                           offset::<fixnum>) :: <boolean>
  (ENSURE_NOT_NULL a)
  (ENSURE_NOT_NULL b)
  (result (SDL_CollideBoundingCircleSurface a x1 y1 b x2 y2 offset)))


(define-cproc cld-make-mask (s::<sdl-surface>) :: <cld-mask>
  (ENSURE_NOT_NULL s)
  (result (SDL_CollideCreateMask s)))

(define-cproc cld-free-mask (mask::<cld-mask>) :: <void>
  (when mask
    (SDL_CollideFreeMask mask)
    (set! (-> (SCM_FOREIGN_POINTER mask-scm) ptr) 0)))

(define-cproc cld-pixel-mask (am::<cld-mask> ax::<fixnum> ay::<fixnum>
                              bm::<cld-mask> bx::<fixnum> by::<fixnum>
                              :optional (skip::<fixnum> 4)) :: <boolean>
  (ENSURE_NOT_NULL am)
  (ENSURE_NOT_NULL bm)
  (result (SDL_CollidePixelMask am ax ay bm bx by skip)))

(define-cproc cld-pixel (a::<top> ax::<fixnum> ay::<fixnum>
                         b::<top> bx::<fixnum> by::<fixnum>
                         :optional (skip::<fixnum> 4)) :: <boolean>
  (cond
    [(is-type? a <sdl-surface>)
     (let* ([as :: SDL_Surface* (unboxing a <sdl-surface>)])
       (ENSURE_NOT_NULL as)
       (cond
         [(is-type? b <sdl-surface>)
           (let* ([bs :: SDL_Surface* (unboxing b <sdl-surface>)])
             (ENSURE_NOT_NULL bs)
             (result (SDL_CollidePixel as ax ay bs bx by skip)))]
         [(is-type? b <cld-mask>) 
          (let* ([bm :: SDL_CollideMask (unboxing b <cld-mask>)])
            (ENSURE_NOT_NULL bm)
            (result (SDL_CollidePixelSurfaceAndMask as ax ay bm bx by skip)))]
         [else (Scm_Error "<sdl-surface> or <cld-mask> required, but got %S." b)]))]
    [(is-type? a <cld-mask>)
     (let* ([am :: SDL_CollideMask (unboxing a <cld-mask>)])
       (ENSURE_NOT_NULL am)
       (cond
         [(is-type? b <sdl-surface>)
           (let* ([bs :: SDL_Surface* (unboxing b <sdl-surface>)])
             (ENSURE_NOT_NULL bs)
             (result (SDL_CollidePixelSurfaceAndMask bs bx by am ax ay skip)))]
         [(is-type? b <cld-mask>) 
          (let* ([bm :: SDL_CollideMask (unboxing b <cld-mask>)])
            (ENSURE_NOT_NULL bm)
            (result (SDL_CollidePixelMask am ax ay bm bx by skip)))]
         [else (Scm_Error "<sdl-surface> or <cld-mask> required, but got %S." b)]))]
    [else (Scm_Error "<sdl-surface> or <cld-mask> required, but got %S." b)]))

