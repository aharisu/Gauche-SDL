;;;
;;; nnvectorlib.stub
;;;
;;; MIT License
;;; Copyright 2011-2012 aharisu
;;; All rights reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in all
;;; copies or substantial portions of the Software.
;;;
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;; SOFTWARE.
;;;
;;;
;;; aharisu
;;; foo.yobina@gmail.com
;;;

"
#include \"nnvector.h\"
#include \"nnvector_type.gen.h\"
"

(include "nnvector_type.gen.stub.header")
(include "macro.stub.header")

"
typedef unsigned char Uint8;
typedef unsigned short Uint16;
typedef ScmUInt32 Uint32;
typedef signed char Sint8;
typedef signed short Sint16;
typedef ScmInt32 Sint32;

"

;;--------------
;; <nnvector>
;;--------------

(define-constant nn-u8 257)
(define-constant nn-u16 258)
(define-constant nn-u32 260)
(define-constant nn-s8 513)
(define-constant nn-s16 514)
(define-constant nn-s32 516)
(define-constant nn-boolean 769)

(define-cise-stmt un-case
  [(_ type u8-stmt u16-stmt u32-stmt s8-stmt s16-stmt s32-stmt ub-stmt)
  `(case ,type
     [(TYPE_U8) ,u8-stmt]
     [(TYPE_U16) ,u16-stmt]
     [(TYPE_U32) ,u32-stmt]
     [(TYPE_S8) ,s8-stmt]
     [(TYPE_S16) ,s16-stmt]
     [(TYPE_S32) ,s32-stmt]
     [(TYPE_BOOLEAN) ,ub-stmt]
     [else (Scm_Error "type mismatch")])]
  [(_ type obj val u8-stmt u16-stmt u32-stmt s8-stmt s16-stmt s32-stmt ub-stmt)
  `(case ,type
     [(TYPE_U8) 
      (begin
        (unless (is-type? ,obj <uint8>)
          (Scm_Error "<uint8> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <uint8>))
        ,u8-stmt)]
     [(TYPE_U16) 
      (begin
        (unless (is-type? ,obj <uint16>)
          (Scm_Error "<uint16> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <uint16>))
        ,u16-stmt)]
     [(TYPE_U32) 
      (begin
        (unless (is-type? ,obj <uint32>)
          (Scm_Error "<uint32> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <uint32>))
        ,u32-stmt)]
     [(TYPE_S8) 
      (begin
        (unless (is-type? ,obj <int8>)
          (Scm_Error "<int8> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <int8>))
        ,s8-stmt)]
     [(TYPE_S16) 
      (begin
        (unless (is-type? ,obj <int16>)
          (Scm_Error "<int16> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <int16>))
        ,s16-stmt)]
     [(TYPE_S32) 
      (begin
        (unless (is-type? ,obj <int32>)
          (Scm_Error "<int32> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <int32>))
        ,s32-stmt)]
     [(TYPE_BOOLEAN)
      (begin
        (unless (is-type? ,obj <boolean>)
          (Scm_Error "<boolean> required, but got %S." ,obj))
        (set! ,val (unboxing ,obj <boolean>))
        ,ub-stmt)]
     [else (Scm_Error "type mismatch")])])

;;;;;
;; @type cmd
;; @@class-c->scm Scm_SequenceClass <sequence>
;; @@class-c->scm Scm_CollectionClass <collection>

(define-cclass <nnvector>
  :built-in :struct
  "Scm_nnvector*" "Scm_nnvectorClass"
  ("Scm_SequenceClass" "Scm_CollectionClass")
  (
   (type :type <fixnum>)
   (length :type <int>
           :setter #f
           :getter "return SCM_MAKE_INT(NNVECTOR_SIZE2LENGTH(
            SCM_NNVECTOR_DATA(OBJARG).type, SCM_NNVECTOR_DATA(OBJARG).size));
   ")
   (size :type <int>
         :setter #f
         :getter "return SCM_MAKE_INT(SCM_NNVECTOR_DATA(OBJARG).size);")
   )
  (meta #t)
  (printer "
           int i;
           nnvector* vec = &(SCM_NNVECTOR_DATA(obj));
           int len = NNVECTOR_SIZE2LENGTH(vec->type, vec->size);

           switch(vec->type) {
           case TYPE_U8:
             Scm_Printf(port, \"#nnu8(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%u \", vec->buf[i]);
             }
             Scm_Printf(port, \"%u)\", vec->buf[i]);
             break;
           case TYPE_S8:
             Scm_Printf(port, \"#nns8(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%d \", vec->buf[i]);
             }
             Scm_Printf(port, \"%d)\", vec->buf[i]);
             break;
           case TYPE_U16:
             Scm_Printf(port, \"#nnu16(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%u \", ((unsigned short*)vec->buf)[i]);
             }
             Scm_Printf(port, \"%u)\", ((unsigned short*)vec->buf)[i]);
            break;
           case TYPE_S16:
             Scm_Printf(port, \"#nns16(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%d \", ((unsigned short*)vec->buf)[i]);
             }
             Scm_Printf(port, \"%d)\", ((unsigned short*)vec->buf)[i]);
            break;
           case TYPE_U32:
             Scm_Printf(port, \"#nnu32(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%u \", ((unsigned long*)vec->buf)[i]);
             }
             Scm_Printf(port, \"%u)\", ((unsigned long*)vec->buf)[i]);
            break;
           case TYPE_S32:
             Scm_Printf(port, \"#nns32(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%d \", ((unsigned long*)vec->buf)[i]);
             }
             Scm_Printf(port, \"%d)\", ((unsigned long*)vec->buf)[i]);
            break;
          case TYPE_BOOLEAN:
             Scm_Printf(port, \"#nnb(\");
             for(i = 0;i < len - 1;++i) {
                   Scm_Printf(port, \"%s \", vec->buf[i] != 0 ? \"#t\" : \"#f\");
             }
             Scm_Printf(port, \"%s)\", vec->buf[i] != 0 ? \"#t\" : \"#f\");
           }

           ")
  )

(define-cfn Scm_MakeNNVector (type::int size::int) ::ScmObj
            :static
  (let* ([vec::nnvector])
    (set! (@ vec.buf) (SCM_NEW_ARRAY Uint8 size))
    (set! (@ vec.size) size)
    (set! (@ vec.type) type)
    (return (boxing vec <nnvector>))))

(define-cproc make-nnvector (type::<fixnum> len::<int>) ::<nnvector>
  (let* ([size::int (NNVECTOR_LENGTH2SIZE type len)]
         [vec::nnvector])
    (set! (@ vec.buf) (SCM_NEW_ARRAY Uint8 size))
    (set! (@ vec.size) size)
    (set! (@ vec.type) type)
    (result vec)))

(define-cproc nnvector-set! (vec::<nnvector> index::<int> num::<top>) ::<void>
  (let* ([n :: int])
    (un-case (ref vec type) num n
           (set! (aref (cast Uint8* (@ vec.buf)) index) n)
           (set! (aref (cast Uint16* (@ vec.buf)) index) n)
           (set! (aref (cast Uint32* (@ vec.buf)) index) n)
           (set! (aref (cast Sint8* (@ vec.buf)) index) n)
           (set! (aref (cast Sint16* (@ vec.buf)) index) n)
           (set! (aref (cast Sint32* (@ vec.buf)) index) n)
           (set! (aref (cast Uint8* (@ vec.buf)) index) n))))

(define-cproc nnu8vector-set! (vec::<nnvector> index::<int> num::<uint8>
                              :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (set! (aref (+ (cast Uint8* (@ vec.buf)) offset-in-bytes) index) num))

(define-cproc nnu16vector-set! (vec::<nnvector> index::<int> num::<uint16>
                               :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (memcpy (+ (cast Uint8* (@ vec.buf)) offset-in-bytes (* 2 index))
          (& num) 2))

(define-cproc nnu32vector-set! (vec::<nnvector> index::<int> num::<uint32>
                               :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (memcpy (+ (cast Uint8* (@ vec.buf)) offset-in-bytes (* 4 index))
          (& num) 4))

(define-cproc nns8vector-set! (vec::<nnvector> index::<int> num::<int8>
                              :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (set! (aref (+ (cast Sint8* (@ vec.buf)) offset-in-bytes) index) num))

(define-cproc nns16vector-set! (vec::<nnvector> index::<int> num::<int16>
                               :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (memcpy (+ (cast Sint8* (@ vec.buf)) offset-in-bytes (* 2 index))
          (& num) 2))

(define-cproc nns32vector-set! (vec::<nnvector> index::<int> num::<int32>
                               :optional (offset-in-bytes::<fixnum> 0)) ::<void>
  (memcpy (+ (cast Sint8* (@ vec.buf)) offset-in-bytes (* 4 index))
          (& num) 4))

(define-cproc nnbvector-set! (vec::<nnvector> index::<int> b::<boolean>) ::<void>
  (set! (aref (cast Uint8* (@ vec.buf)) index) b))

(define-cproc nnvector-ref (vec::<nnvector> index::<int> :optional fallback) :: <top>
  :fast-flonum
  (setter nnvector-set!)
  (un-case (ref vec type)
           (result (boxing (aref (cast Uint8* (@ vec.buf)) index) <uint8>))
           (result (boxing (aref (cast Uint16* (@ vec.buf)) index) <uint16>))
           (result (boxing (aref (cast Uint32* (@ vec.buf)) index) <uint32>))
           (result (boxing (aref (cast Sint8* (@ vec.buf)) index) <int8>))
           (result (boxing (aref (cast Sint16* (@ vec.buf)) index) <int16>))
           (result (boxing (aref (cast Sint32* (@ vec.buf)) index) <int32>))
           (result (boxing (aref (cast Uint8* (@ vec.buf)) index) <boolean>))))

(define-cproc nnu8vector-ref (vec::<nnvector> index::<int> 
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<uint8>
  (result (aref (+ (cast Uint8* (@ vec.buf)) offset-in-bytes) index)))

(define-cproc nnu16vector-ref (vec::<nnvector> index::<int>
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<uint16>
  (let* ([num :: Uint16])
    (memcpy (& num)
            (+ (cast Uint8* (@ vec.buf)) offset-in-bytes (* 2 index))
             2)
  (result num)))

(define-cproc nnu32vector-ref (vec::<nnvector> index::<int>
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<uint32>
  (let* ([num :: Uint32])
    (memcpy (& num)
            (+ (cast Uint8* (@ vec.buf)) offset-in-bytes (* 4 index))
             4)
  (result num)))

(define-cproc nns8vector-ref (vec::<nnvector> index::<int> 
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<int8>
  (result (aref (+ (cast Sint8* (@ vec.buf)) offset-in-bytes) index)))

(define-cproc nns16vector-ref (vec::<nnvector> index::<int>
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<int16>
  (let* ([num :: Sint16])
    (memcpy (& num)
            (+ (cast Sint8* (@ vec.buf)) offset-in-bytes (* 2 index))
            2)
  (result num)))

(define-cproc nns32vector-ref (vec::<nnvector> index::<int>
                             :optional (offset-in-bytes::<fixnum> 0) fallback) ::<int32>
  (let* ([num :: Sint32])
    (memcpy (& num)
            (+ (cast Sint8* (@ vec.buf)) offset-in-bytes (* 4 index))
            4)
  (result num)))

(define-cproc nnbvector-ref (vec::<nnvector> index::<int> :optional fallback) ::<boolean>
  (result (aref (cast Uint8* (@ vec.buf)) index)))

(define-cproc nnvector-copy (vec::<nnvector> :optional (start::<fixnum> 0) (end::<fixnum> -1)) ::<nnvector>
  (SCM_CHECK_START_END start end (@ vec.size))
  (let* ([v :: ScmObj (Scm_MakeNNVector (@ vec.type) 
                                        (* (logand (@ vec.type) NN_SIZE_MASK)
                                           (- end start)))])
    (memcpy (ref (unboxing v <nnvector>) buf)
            (+ (@ vec.buf) start)
            (ref (unboxing v <nnvector>) size))
    (return v)))

(define-cproc nnvector-copy! (target::<nnvector> tstart::<fixnum> source::<nnvector>
                             :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <nnvector>
  (when (!= (@ target.type) (@ source.type))
    (Scm_Error "type missmatch."))
  (let* ([tlen::int (NNVECTOR_SIZE2LENGTH (@ target.type) (@ target.size))])
    (when (and (>= tstart 0) (< tstart tlen))
      (SCM_CHECK_START_END start end (NNVECTOR_SIZE2LENGTH (@ source.type) (@ source.size)))
      (set! start (NNVECTOR_LENGTH2SIZE (@ source.type) start))
      (set! end (NNVECTOR_LENGTH2SIZE (@ source.type) end))
      (set! tstart (NNVECTOR_LENGTH2SIZE (@ target.type) tstart))
      (set! tlen (NNVECTOR_LENGTH2SIZE (@ target.type) tlen))
      (let* ([sp::(const char*)
               (?: (== start 0) (@ source.buf) (+ (@ source.buf) start))]
             [ep::(const char*)
               (?: (== end (@ source.size)) (+ (@ source.buf) (@ source.size)) (+ (@ source.buf) end))]
             [buf::(char*) (+ (@ target.buf) tstart)])
        (if (> (- tlen tstart) (- ep sp))
          (memcpy buf sp (- ep sp))
          (memcpy buf sp (- tlen tstart))))))
  (result target))

(define-cproc nnvector->list (vec::<nnvector> 
                               :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <list>
  (let* ([len :: int (NNVECTOR_SIZE2LENGTH (@ vec.type) (@ vec.size))])
    (SCM_CHECK_START_END start end len)
    (let* ([i :: int (- end 1)]
           [c :: ScmObj SCM_NIL])
      (un-case (ref vec type)
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Uint8* (@ vec.buf)) i) <uint8>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Uint16* (@ vec.buf)) i) <uint16>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Uint32* (@ vec.buf)) i) <uint32>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Sint8* (@ vec.buf)) i) <int8>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Sint16* (@ vec.buf)) i) <int16>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Sint32* (@ vec.buf)) i) <int32>) c)))
        (for [() (>= i start) (pre-- i)]
             (set! c (Scm_Cons (boxing (aref (cast Uint8* (@ vec.buf)) i) <boolean>) c))))
      (result c))))

(define-cproc nnvector->vector (vec::<nnvector>
                                 :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <top>
  (let* ([len :: int (NNVECTOR_SIZE2LENGTH (@ vec.type) (@ vec.size))])
    (SCM_CHECK_START_END start end len)
    (let* ([i :: int start]
           [v :: ScmObj (Scm_MakeVector (- end start) SCM_NIL)])
      (un-case (ref vec type)
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Uint8* (@ vec.buf)) i) <uint8>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Uint16* (@ vec.buf)) i) <uint16>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Uint32* (@ vec.buf)) i) <uint32>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Sint8* (@ vec.buf)) i) <int8>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Sint16* (@ vec.buf)) i) <int16>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Sint32* (@ vec.buf)) i) <int32>)))
        (for [() (< i end) (pre++ i)]
             (set! (SCM_VECTOR_ELEMENT v i) (boxing (aref (cast Uint8* (@ vec.buf)) i) <boolean>))))
      (result v))))

(define-cproc nnvector->uvector (vec::<nnvector>
                                  :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <top>
  (let* ([len :: int (NNVECTOR_SIZE2LENGTH (@ vec.type) (@ vec.size))])
    (SCM_CHECK_START_END start end len)
    (let* ([i :: int start]
           [v :: ScmObj])
      (un-case (ref vec type)
        (begin
          (set! v (Scm_MakeU8Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_U8VECTOR_ELEMENT v i) (aref (cast Uint8* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeU16Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_U16VECTOR_ELEMENT v i) (aref (cast Uint16* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeU32Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_U32VECTOR_ELEMENT v i) (aref (cast Uint32* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeS8Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_S8VECTOR_ELEMENT v i) (aref (cast Sint8* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeS16Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_S16VECTOR_ELEMENT v i) (aref (cast Sint16* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeS32Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_S32VECTOR_ELEMENT v i) (aref (cast Sint32* (@ vec.buf)) i))))
        (begin
          (set! v (Scm_MakeU8Vector (- end start) 0))
          (for [() (< i end) (pre++ i)]
               (set! (SCM_U8VECTOR_ELEMENT v i) (aref (cast Uint8* (@ vec.buf)) i)))))
      (result v))))

(define-cproc nnvector->uvector-shared (vec::<nnvector>) :: <top>
  (let* ([len :: int (NNVECTOR_SIZE2LENGTH (@ vec.type) (@ vec.size))])
    (let* ([v :: ScmObj])
      (un-case (ref vec type)
        (set! v (Scm_MakeU8VectorFromArrayShared len (cast Uint8* (@ vec.buf))))
        (set! v (Scm_MakeU16VectorFromArrayShared len (cast Uint16* (@ vec.buf))))
        (set! v (Scm_MakeU32VectorFromArrayShared len (cast Uint32* (@ vec.buf))))
        (set! v (Scm_MakeS8VectorFromArrayShared len (cast Sint8* (@ vec.buf))))
        (set! v (Scm_MakeS16VectorFromArrayShared len (cast Sint16* (@ vec.buf))))
        (set! v (Scm_MakeS32VectorFromArrayShared len (cast Sint32* (@ vec.buf))))
        (set! v (Scm_MakeU8VectorFromArrayShared len (cast Uint8* (@ vec.buf)))))
      (result v))))

(define-cproc uvector->nnvector (uv
                                  :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <top>
  (let* ([len :: int (SCM_UVECTOR_SIZE uv)])
    (SCM_CHECK_START_END start end len)
    (let* ([i :: int start]
           [v :: nnvector])
      (case (Scm_UVectorType (SCM_CLASS_OF uv))
        [(SCM_UVECTOR_U8) 
         (set! (@ v.size) (- end start))
         (set! (@ v.buf) (SCM_NEW_ARRAY Uint8 (@ v.size)))
         (set! (@ v.type) TYPE_U8)
         (for [() (< i end) (pre++ i)]
              (set! (aref (cast Uint8* (@ v.buf)) i)(SCM_U8VECTOR_ELEMENT uv i)))]
        [(SCM_UVECTOR_U16) 
         (set! (@ v.size) (* (- end start) 2))
         (set! (@ v.buf) (SCM_NEW_ARRAY Uint8 (@ v.size)))
         (set! (@ v.type) TYPE_U16)
         (for [() (< i end) (pre++ i)]
              (set! (aref (cast Uint16* (@ v.buf)) i)(SCM_U16VECTOR_ELEMENT uv i)))]
        [(SCM_UVECTOR_U32) 
         (set! (@ v.size) (* (- end start) 4))
         (set! (@ v.buf) (SCM_NEW_ARRAY Uint8 (@ v.size)))
         (set! (@ v.type) TYPE_U32)
         (for [() (< i end) (pre++ i)]
              (set! (aref (cast Uint32* (@ v.buf)) i)(SCM_U32VECTOR_ELEMENT uv i)))]
        [else (Scm_Error "type mismatch")])
      (result (boxing v <nnvector>)))))

(define-cproc uvector->nnvector-shared (uv::<uvector>) :: <top>
  (let* ([len :: int (SCM_UVECTOR_SIZE uv)])
    (let* ([v :: nnvector])
      (case (Scm_UVectorType (SCM_CLASS_OF uv))
        [(SCM_UVECTOR_U8) 
         (set! (@ v.size) len)
         (set! (@ v.buf) (cast Uint8* (SCM_U8VECTOR_ELEMENTS uv)))
         (set! (@ v.type) TYPE_U8)]
        [(SCM_UVECTOR_U16) 
         (set! (@ v.size) (* len 2))
         (set! (@ v.buf) (cast Uint8* (SCM_U16VECTOR_ELEMENTS uv)))
         (set! (@ v.type) TYPE_U16)]
        [(SCM_UVECTOR_U32) 
         (set! (@ v.size) (* len 4))
         (set! (@ v.buf) (cast Uint8* (SCM_U32VECTOR_ELEMENTS uv)))
         (set! (@ v.type) TYPE_U32)]
        [else (Scm_Error "type mismatch")])
      (result (boxing v <nnvector>)))))

(define-cfn string->bytevector (type::int s::ScmString* start::int end::int) :static
  (let* ([size::u_int] [len::u_int]
         [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
    (SCM_CHECK_START_END start end (cast int len))
    (let* ([sp::(const char*) (?: (== start 0) ss (Scm_StringPosition s start))]
           [ep::(const char*) (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
           [buf::char* (SCM_NEW_ATOMIC2 (char*) (- ep sp))])
      (memcpy buf sp (- ep sp))
      (let* ([vec :: nnvector])
        (set! (@ vec.buf) buf)
        (set! (@ vec.size) (cast int (- ep sp)))
        (set! (@ vec.type) type)
        (return (boxing vec <nnvector>))))))

(define-cfn string->bytevector!
  (v::nnvector* tstart::int s::ScmString* start::int end::int) :: int 
  (let* ([tlen::int (@ v->size)])
    (when (and (>= tstart 0) (< tstart tlen))
      (let* ([size::u_int] [len::u_int]
             [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
        (SCM_CHECK_START_END start end (cast int len))
        (let* ([sp::(const char*)
                    (?: (== start 0) ss (Scm_StringPosition s start))]
               [ep::(const char*)
                    (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
               [buf::(char*) (+ (cast char* (@ v->buf)) tstart)])
          (let* ([copy-len :: int (?: (> (- tlen tstart) (- ep sp))
                                      (- ep sp)
                                      (- tlen tstart))])
            (memcpy buf sp copy-len)
            (return copy-len)))))))

(define-cfn string->wordvector (type::int s::ScmString* start::int end::int) :static
  (let* ([size::u_int] [len::u_int]
         [ss::(const char*) (Scm_GetStringContent s (& size) (& len) NULL)])
    (SCM_CHECK_START_END start end (cast int len))
    (let* ([sp::(const char*)
                (?: (== start 0) ss (Scm_StringPosition s start))]
           [ep::(const char*)
                (?: (== end len) (+ ss size) (Scm_StringPosition s end))]
           [v (Scm_MakeNNVector type (* (- end start) 4))]
           [eltp::ScmInt32* (cast ScmInt32* (ref (unboxing v <nnvector>) buf))]
           [i::int 0])
      (for [() (< sp ep) (post++ i)]
           (let* ([ch::ScmChar])
             (SCM_CHAR_GET sp ch)
             (set! (aref eltp i) ch)
             (+= sp (SCM_CHAR_NBYTES ch))))
      (return v))))

(define-cproc string->nnvector (s::<string> type::<fixnum> 
                                :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <top>
  (cond
    [(== type TYPE_U8) (result (string->bytevector type s start end))]
    [(== type TYPE_U32) (result (string->wordvector type s start end))]
    [else (Scm_Error "TYPE_U8 or TYPE_U32 required, but got %S" type)]))

(define-cproc string->nnvector! (v::<nnvector> tstart::<int> s::<string>
                                 :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <nnvector>
  (when (!= (@ v.type) TYPE_U8)
    (Scm_Error "TYPE_U8 required, but got %S" (@ v.type)))
  (string->bytevector! (& v) tstart s start end)
  (result v))

(define-cfn bytevector->string (v::nnvector* start::int end::int)
  (let* ([len::int (@ v->size)])
    (SCM_CHECK_START_END start end len)
    (return (Scm_MakeString (+ (cast char* (@ v->buf)) start)
                            (- end start) -1 SCM_STRING_COPYING))))

(define-cfn wordvector->string (v::nnvector* start::int end::int) :static
  (let* ([len::int (NNVECTOR_SIZE2LENGTH (@ v->type) (@ v->size))]
         [s (Scm_MakeOutputStringPort FALSE)])
    (SCM_CHECK_START_END start end len)
    (let* ([eltp::ScmInt32* (cast ScmInt32* (@ v->buf))])
      (while (< start end)
        (let* ([ch::ScmChar (cast ScmChar (aref eltp (post++ start)))])
          (Scm_PutcUnsafe ch (SCM_PORT s)))))
    (return (Scm_GetOutputStringUnsafe (SCM_PORT s) 0))))

(define-cproc nnvector->string (v::<nnvector> 
                                :optional (start::<fixnum> 0) (end::<fixnum> -1)) :: <top>
  (cond
    [(== (@ v.type) TYPE_U8) (result (bytevector->string (& v) start end))]
    [(== (@ v.type) TYPE_U32) (result (wordvector->string (& v) start end))]
    [else (Scm_Error "TYPE_U8 or TYPE_U32 required, but got %S" (@ v.type))]))

